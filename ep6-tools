#!/usr/bin/perl

use strict;
use feature 'say';

use Config;
use Cwd 'realpath';
use File::Basename;
use File::Copy;
use File::Slurp;
use Getopt::Long;
use JSON::PP;
use List::MoreUtils qw( any );
use Sort::Versions;


my (
    $vm_name,
    $get_vm_name,
    $file_name,
    $file_name_relative_to_eproot,
    $import_xml,
    $delete_xml,
    $import_hook,
    $delete_hook,
    $restart,
    $restart_all,
    $perm_all,
    $perm_cartridges,
    $perm_webroot,
    $lint_me,
    $lint_mode,
    $lint_option,
    $tidy,
    $tidy_option,
    $debug_level,
    $copy_to_shared,
    $get_log,
    $get_file_name_from_vm_path,
    $silent,
    $verbose,
    $h_config,
    $h_vm_config
);

GetOptions(
    "vm=s" => \$vm_name,
    "get-vm" => \$get_vm_name,

    "import-xml" => \$import_xml,
    "delete-xml" => \$delete_xml,
    "import-hook" => \$import_hook,
    "delete-hook" => \$delete_hook,

    "restart" => \$restart,
    "restart-all" => \$restart_all,

    "perm-all" => \$perm_all,
    "perm-cartridges" => \$perm_cartridges,
    "perm-webroot" => \$perm_webroot,

    "lint" => \$lint_me,
    "lint-mode=s" => \$lint_mode,
    "lint-option=s" => \$lint_option,

    "tidy" => \$tidy,
    "tidy-option=s" => \$tidy_option,

    "set-debug-level=i" => \$debug_level,

    "copy-to-shared" => \$copy_to_shared,

    "get-log=s" => \$get_log,
    "get-file-from-vm-path=s" => \$get_file_name_from_vm_path,

    "silent" => \$silent,
    "verbose" => \$verbose,

    "<>" => \&process_file_name_arg
) or die 'E01: invalid command line arguments';

# use EP6_DEFAULT_VM as vm name if set and the cli param was ommitted
# for those who only have one vm
unless (defined $vm_name) {
    if (defined $ENV{'EP6_DEFAULT_VM'}) {
        $vm_name = $ENV{'EP6_DEFAULT_VM'};
    }
    else {
        die "E06: no vm found";
    }
}

load_config();

if (defined $get_vm_name) {
    say $vm_name;
}

if (defined $import_xml) {
    logme("Import xml $file_name_relative_to_eproot on $vm_name\n");
    execute_command(build_vm_command('ep6-import-xml'));
}
elsif (defined $delete_xml) {
    logme("Delete xml $file_name_relative_to_eproot on $vm_name\n");
    execute_command(build_vm_command('ep6-delete-xml'));
}
elsif (defined $import_hook) {
    logme("Import hook $file_name_relative_to_eproot on $vm_name\n");
    execute_command(build_vm_command('ep6-import-hook'));
}
elsif (defined $delete_hook) {
    logme("Delete hook $file_name_relative_to_eproot on $vm_name\n");
    execute_command(build_vm_command('ep6-delete-hook'));
}
elsif (defined $restart) {
    logme("Restart appserver on $vm_name\n");
    execute_command(build_vm_command('ep6-restart'));
}
elsif (defined $restart_all) {
    logme("Restart all services on $vm_name\n");
    execute_command(build_vm_command('ep6-restart-all'));
}
elsif (defined $perm_all) {
    logme("Perm all  on $vm_name\n");
    execute_command(build_vm_command('ep6-perm-all'));
}
elsif (defined $perm_cartridges) {
    logme("Perm cartridges  on $vm_name\n");
    execute_command(build_vm_command('ep6-perm-cartridges'));
}
elsif (defined $perm_webroot) {
    logme("Perm webroot  on $vm_name\n");
    execute_command(build_vm_command('ep6-perm-webroot'));
}
elsif (defined $debug_level) {
    logme("Set debug level to $debug_level on $vm_name\n");

    if (any { $debug_level == $_ } (0 .. 2)) {
        execute_command(build_vm_command("ep6-set-debug-level $debug_level"));
    }
    else {
        die "E04: debug_level must be one of 0, 1, 2";
    }
}
elsif (defined $copy_to_shared) {
    logme("Copy-to-shared $file_name_relative_to_eproot on $vm_name\n");

    copy_to_shared();
}
elsif (defined $lint_me) {
    logme("Lint $file_name_relative_to_eproot on $vm_name\n");

    lint();
}
elsif (defined $tidy) {
    logme("Tidy $file_name_relative_to_eproot on $vm_name\n");

    tidy();
}
elsif (defined $get_log) {
    say platform_specific_path($h_vm_config->{'logs'} . "/$get_log.log");
}
elsif (defined $get_file_name_from_vm_path) {
    # example:
    # <!-- BEGIN INCLUDE /srv/epages/eproot/Cartridges/DE_EPAGES/Presentation/Templates/BasePageType.Head.html 1.161 seconds -->

    $get_file_name_from_vm_path =~ m/Cartridges(.*)$/;

    say platform_specific_path($h_vm_config->{'cartridges'} . $1);
}

sub process_file_name_arg {
    my ($arg) = @_;
    if (-f $arg) {
        $file_name = File::Spec->rel2abs($arg);
        process_file_name();
    }
}

sub process_file_name {
    die 'E02: file_name unset' unless defined $file_name;

    $file_name = unix_path($file_name);

    if (defined $vm_name and $file_name =~ m/.*\/(Cartridges\/.+)$/) {
        $file_name_relative_to_eproot = $1;
    }
    elsif ($file_name =~ m/.*\/(.+?)\/(Cartridges\/.+)$/) {
        # use the folder above Cartridges as vm name
        $vm_name = $1;
        $file_name_relative_to_eproot = $2;

        if ($verbose) {
            say "vm_name = $vm_name";
            say "file_name_relative_to_eproot = $file_name_relative_to_eproot\n";
        }
    }
}

# TODO: check File::Spec->canonpath etc.
sub dos2unix {
    my ($path) = @_;

    $path =~ s/\\/\//g;
    return $path;
}

sub unix2dos {
    my ($path) = @_;

    $path =~ s/\//\\/g;
    return $path;
}

sub is_win32 {
    return (any { lc $Config{'osname'} eq $_ } qw(cygwin mswin32)) ? 1 : 0;
}

sub unix_path {
    my ($path) = @_;
    return is_win32() ? dos2unix($path) : $path;
}

sub platform_specific_path {
    my ($path) = @_;
    return is_win32() ? unix2dos($path) : $path;
}

sub load_config {
    my $content = read_file(platform_specific_path(dirname($0) . '/ep6-config'));
    $content =~ s/\n//g;
    $content =~ s/\s+/ /g;

    eval {
        $h_config = JSON::PP->new->utf8->decode($content);
    };
    die "E05: error at loading ep6-config: $@" if ($@);

    $h_vm_config = $h_config->{'vms'}->{$vm_name};
}

sub build_vm_command {
    my ($command, $vm_file_name) = @_;

    die 'E03: vm_name unset' unless defined $vm_name;

    $vm_file_name = "/srv/epages/eproot/$file_name_relative_to_eproot" unless defined $vm_file_name;

    return "ssh root\@$vm_name $command $vm_file_name";
}

sub execute_command {
    my ($command) = @_;

    my $result = `$command`;

    say $result unless $silent;
    return $result;
}

sub logme {
    my ($message) = @_;

    say $message if $verbose;
}

sub lint {
    my $mode;

    if (defined $lint_mode) {
        $mode = $lint_mode;
    }
    elsif ($file_name_relative_to_eproot =~ m/\.([^\.]+$)/) {
        $mode = lc $1;
    }

    if ($mode eq 'html') {
        execute_command("cat $file_name | ssh root\@$vm_name ep6-tlec");
    }
    elsif (any { $mode eq $_ } qw(pl pm t)) {
        if (defined $lint_option and any { $lint_option eq $_ } qw( perlcritic critic )) {
            execute_command(build_vm_command('ep6-perlcritic'));
        }
        else {
            execute_command("cat $file_name | ssh root\@$vm_name /srv/epages/eproot/Perl/bin/perl -wc");
        }
    }
    elsif ($mode eq 'js') {
        execute_command("jshint $file_name");
    }
}

sub tidy {
    my $mode;

    if ($file_name_relative_to_eproot =~ m/\.([^\.]+$)/) {
        $mode = lc $1;
    }

    if (any { $mode eq $_ } qw(pl pm t)) {
        if (defined $tidy_option and $tidy_option eq 'organize-imports') {
            execute_command(build_vm_command('ep6-organize-imports'));
        }
    }
}

sub copy_to_shared {
    return 1 if index(platform_specific_path($file_name), $h_vm_config->{'cartridges'}) == -1;

    my @storetypes = sort { versioncmp($b, $a) } glob $h_vm_config->{'storetypes'} . '/*';
    my $storetype_path = $storetypes[0];
    my $file_name_storetypes;

    # case 1: file depends on dojo
    if ($file_name_relative_to_eproot =~ m/Data\/Public(.*)$/) {
        $file_name_storetypes = $storetype_path . '/Store' . $1;
    }

    # case 2: file depends on jquery
    if ($file_name_relative_to_eproot =~ m/\/(.*)\/Data\/javascript(.*)$/) {
        $file_name_storetypes = $storetype_path . '/Store/javascript/epages/cartridges/' . lc $1 . $2;
    }

    if (defined $file_name_storetypes) {
        say "Copy to $file_name_storetypes";
        copy(platform_specific_path($file_name), platform_specific_path($file_name_storetypes)) or say "Copy failed: $!";
    }
}
